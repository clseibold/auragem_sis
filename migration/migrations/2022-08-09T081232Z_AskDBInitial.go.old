package migrations

import (
	"context"
	"database/sql"
	"time"

	"gitlab.com/clseibold/auragem_sis/db"
	"gitlab.com/clseibold/auragem_sis/migration/types"
)

func init() {
	registerMigration(AskDBInitial{})
}

type AskDBInitial struct{}

func (m AskDBInitial) Version() types.MigrationVersion {
	return types.MigrationVersion(time.Date(2022, 8, 9, 8, 12, 32, 0, time.UTC))
}

func (m AskDBInitial) Name() string {
	return "AskDBInitial"
}

func (m AskDBInitial) DB() db.DBType {
	return db.AskDB
}

func (m AskDBInitial) Description() string {
	return "Initial Migration for new Ask Database"
}

func (m AskDBInitial) Up(tx *sql.Tx) error {
	_, err := tx.ExecContext(context.Background(), `
	CREATE TABLE members (
		id bigint generated by default as identity primary key,
		username character varying(150) COLLATE UNICODE_CI,
		language character varying(10) NOT NULL,
		timezone character varying(255) NOT NULL,
		is_staff boolean NOT NULL,
		is_active boolean NOT NULL,
		date_joined timestamp NOT NULL
	);
	`)
	if err != nil {
		return err
	}

	_, err = tx.ExecContext(context.Background(), `
	CREATE TABLE membercerts (
		id bigint generated by default as identity primary key,
		memberid bigint references members,
		title character varying(1020) COLLATE UNICODE_CI,
		certificate character varying(150) NOT NULL,
		is_active boolean NOT NULL,
		date_added timestamp NOT NULL
	);
	`)
	if err != nil {
		return err
	}

	_, err = tx.ExecContext(context.Background(), `
	CREATE TABLE topics (
		id bigint generated by default as identity primary key,
		title character varying(1020) COLLATE UNICODE_CI,
		description BLOB SUB_TYPE TEXT CHARACTER SET UTF8 COLLATE UNICODE_CI,
		date_added timestamp NOT NULL
	);
	`)
	if err != nil {
		return err
	}

	// Questions and Answers Tables
	_, err = tx.ExecContext(context.Background(), `
	CREATE TABLE questions (
		id bigint generated by default as identity primary key,
		topicid bigint references topics NOT NULL,
		title character varying(1020) COLLATE UNICODE_CI,
		text BLOB SUB_TYPE TEXT CHARACTER SET UTF8 COLLATE UNICODE_CI,
		tags character varying(1020) COLLATE UNICODE_CI,
		memberid bigint references members,
		date_added timestamp NOT NULL
	);
	`)
	if err != nil {
		return err
	}

	_, err = tx.ExecContext(context.Background(), `
	CREATE TABLE answers (
		id bigint generated by default as identity primary key,
		questionid bigint references questions NOT NULL,
		text BLOB SUB_TYPE TEXT CHARACTER SET UTF8 COLLATE UNICODE_CI,
		gemlog_url character varying(1020) COLLATE UNICODE_CI,
		memberid bigint references members,
		date_added timestamp NOT NULL
	);
	`)
	if err != nil {
		return err
	}

	_, err = tx.ExecContext(context.Background(), `
	CREATE TABLE selectedanswers (
		id bigint generated by default as identity primary key,
		questionid bigint references questions NOT NULL,
		answerid bigint references answers NOT NULL,
		date_added timestamp NOT NULL
	);
	`)
	if err != nil {
		return err
	}

	_, err = tx.ExecContext(context.Background(), `
	CREATE TABLE upvotes (
		id bigint generated by default as identity primary key,
		answerid bigint references answers NOT NULL,
		memberid bigint references members NOT NULL,
		date_added timestamp NOT NULL
	);
	`)
	if err != nil {
		return err
	}

	_, err = tx.ExecContext(context.Background(), `
	CREATE TABLE question_comments (
		id bigint generated by default as identity primary key,
		questionid bigint references questions NOT NULL,
		text BLOB SUB_TYPE TEXT CHARACTER SET UTF8 COLLATE UNICODE_CI,
		memberid bigint references members,
		date_added timestamp NOT NULL
	);
	`)
	if err != nil {
		return err
	}

	_, err = tx.ExecContext(context.Background(), `
	CREATE TABLE answer_comments (
		id bigint generated by default as identity primary key,
		answerid bigint references answers NOT NULL,
		text BLOB SUB_TYPE TEXT CHARACTER SET UTF8 COLLATE UNICODE_CI,
		memberid bigint references members,
		date_added timestamp NOT NULL
	);
	`)
	if err != nil {
		return err
	}

	return nil
}

func (m AskDBInitial) Down(tx *sql.Tx) error {
	panic("Implement me")
}
