package migrations

import (
	"context"
	"database/sql"
	"time"

	"gitlab.com/clseibold/auragem_sis/db"
	"gitlab.com/clseibold/auragem_sis/migration/types"
)

func init() {
	registerMigration(SearchInitial{})
}

type SearchInitial struct{}

func (m SearchInitial) Version() types.MigrationVersion {
	return types.MigrationVersion(time.Date(2021, 6, 8, 14, 2, 37, 0, time.UTC))
}

func (m SearchInitial) Name() string {
	return "SearchInitial"
}

func (m SearchInitial) DB() db.DBType {
	return db.SearchDB
}

func (m SearchInitial) Description() string {
	return "Initial Tables for Search DB"
}

func (m SearchInitial) Up(tx *sql.Tx) error {
	// TODO: Store text of security.txt and robots.txt
	_, err := tx.ExecContext(context.Background(), `
	CREATE TABLE domains (
		id bigint generated by default as identity primary key,
		domain character varying(1020) NOT NULL COLLATE UNICODE_CI,
		title character varying(250) NOT NULL COLLATE UNICODE_CI,
		port integer,
		parentdomainid bigint references domains,
		has_robots boolean,
		has_security boolean,
		has_favicon boolean,
		favicon character varying(10) COLLATE UNICODE,
		crawlIndex integer,
		date_added timestamp with time zone NOT NULL,
		slowdowncount bigint,
		emptymetacount bigint
	);
	`)
	if err != nil {
		return err
	}

	_, err = tx.ExecContext(context.Background(), `
	CREATE TABLE pages (
		id bigint generated by default as identity primary key,
		url character varying(1020) NOT NULL COLLATE UNICODE_CI,
		scheme character varying(50) NOT NULL COLLATE UNICODE_CI,
		domainid bigint references domains,

		contenttype character varying(250) COLLATE UNICODE,
		charset character varying(250) COLLATE UNICODE,
		language character varying(250) COLLATE UNICODE,
		linecount integer,
		udc character varying(25) NOT NULL COLLATE UNICODE_CI,
		headings blob sub_type 1 NOT NULL,

		title character varying(250) NOT NULL COLLATE UNICODE_CI,
		prompt character varying(250) NOT NULL COLLATE UNICODE_CI,
		size integer NOT NULL,
		hash character varying(250) NOT NULL,
		feed boolean,
		publishdate timestamp with time zone NOT NULL,
		indextime timestamp with time zone NOT NULL,

		album character varying(250) NOT NULL COLLATE UNICODE_CI,
		artist character varying(250) NOT NULL COLLATE UNICODE_CI,
		albumartist character varying(250) NOT NULL COLLATE UNICODE_CI,
		composer character varying(250) NOT NULL COLLATE UNICODE_CI,
		track integer,
		disc integer,
		copyright character varying(250) NOT NULL COLLATE UNICODE_CI,
		crawlIndex integer,
		date_added timestamp with time zone NOT NULL,
		last_successful_visit timestamp with time zone NOT NULL,
		hidden boolean,
		has_duplicate_on_gemini boolean
	);
	`) // 1020 URL
	if err != nil {
		return err
	}

	/*
		_, err = tx.ExecContext(context.Background(), `
		CREATE TABLE tags (
			id bigint generated by default as identity primary key,
			pageid bigint references pages,
			name character varying(250) NOT NULL COLLATE UNICODE_CI,
			rank float,
			crawlIndex integer,
			date_added timestamp with time zone NOT NULL
		);
		`)
		if err != nil {
			return err
		}
	*/

	_, err = tx.ExecContext(context.Background(), `
	CREATE TABLE links (
		id bigint generated by default as identity primary key,
		pageid_from bigint references pages,
		pageid_to bigint references pages,
		title character varying(250) COLLATE UNICODE_CI,
		crosshost boolean,
		crawlIndex integer,
		date_added timestamp with time zone NOT NULL
	);
	`)
	if err != nil {
		return err
	}

	return nil
}

func (m SearchInitial) Down(tx *sql.Tx) error {
	panic("Implement me")
}
